#! /bin/bash


SCRIPT_DIR=/opt/sites-mgr/
WWW_DIR=/var/www/
SKEL_DIR="${SCRIPT_DIR}skel/"
ADDUSER_CONF_FILE="${SCRIPT_DIR}adduser.conf"
CONF_FILE="${SCRIPT_DIR}sites.conf"

QUIET=
VERBOSE=
FAKE=

. "$CONF_FILE"


error () {
  echo "$@" >&2
}
info () {
  [ -z "$QUIET" ] && echo "$@"
}
verbose () {
  [ -n "$VERBOSE" ] && echo "$@"
}
execute () {
  verbose "  -> " "$@"
  "$@"
}
fake () {
  if [ -z "$FAKE" ]
  then
    execute "$@"
  else
    verbose "  ->X" "$@"
  fi
}
  
p () {
  echo "|p" >&2
  while [ $# != 0 ]
  do
    echo "|p $1" >&2
    shift
  done
}
d () {
  echo "| " "$@" >&2
}
promptyn () {
  while true; do
    #read -p "$1 " yn
    printf "$1 "
    read yn

    case ${yn:-$2} in
    [Yy]*)
      return 0
      ;;
    [Nn]*)
      return 1
      ;;
    *)
      echo "Please answer yes or no."
      ;;
    esac
  done
}

parse_sitename () {
  nb_arg_parsed=0
  site_name=
  sitename2dir "$1"
  if [ -n "$site_name" ]
  then
    nb_arg_parsed=1
    return 0
  fi
  sitename2dir "$1" "$2"
  if [ -n "$site_name" ]
  then
    nb_arg_parsed=2
    return 0
  fi
  return 1
}

reset_domain () {
  domain_name=
  domain_path=
}

reset_site () {
  site_name=
  site_path=
  site_full_path=
}


escape_sed () {
  if [ $# != 0 ]
  then
    echo "$@" | escape_sed
    return $!
  fi
  sed 's/[]\/$*.^|[]/\\&/g'
}
escape_sed2 () {
  if [ $# != 0 ]
  then
    echo "$@" | escape_sed2
    return $!
  fi
  sed 's/[\/&]/\\&/g'
}

trailing_slash () {
  if [ $# != 0 ]
  then
    echo "$@" | trailing_slash
    return $!
  fi
  sed '/^./s:/*$:/:'
}
get_last_dir () {
  if [ $# != 0 ]
  then
    echo "$@" | get_last_dir
    return $!
  fi
  sed 's:\(^.*/\+\|^\)\([^/]\+\)/*$:\2:'
}
replace_names_domain () {

  if [ -z "$FAKE" ]
  then
    verbose "  -> " sed -i '"$command"' "$@"
  else
    verbose "  ->X" sed -i '"$command"' "$@"
  fi
  [ -z "$FAKE" ] && sed -i "
    s/@@RELATIVE@@/$relative/g;
    s/@@DOMAIN_NAME@@/$(escape_sed2 "$domain_name")/g;
    s/@@DOMAIN_PATH@@/$(escape_sed2 "$domain_relative_path")/g;
    s/@@DOMAIN_FULL_PATH@@/$(escape_sed2 "$domain_full_path")/g;
    s/@@DOMAIN_IP@@/$(escape_sed2 "$domain_ip")/g;
  " "$@"
}

replace_names_to_dir_domain () {
  relative="r"

  verbose "  RELATIVE=$relative"
  verbose "  DOMAIN_NAME=$domain_name"
  verbose "  DOMAIN_PATH=$domain_relative_path"
  verbose "  DOMAIN_FULL_PATH=$domain_full_path"
  verbose "  DOMAIN_IP=$domain_ip"

  find -L "$@" -type f -print0 | while IFS= read -r -d '' file
  do
    replace_names_domain "$file"
  done
}


replace_names () {

  if [ -z "$FAKE" ]
  then
    verbose "  -> " sed -i '"$command"' "$@"
  else
    verbose "  ->X" sed -i '"$command"' "$@"
  fi
  [ -z "$FAKE" ] && sed -i "
    s/@@RELATIVE@@/$relative/g;
    s/##DISABLE_PRIVATE##/$disable_private/g;
    s/##DISABLE_ASSETS##/$disable_assets/g;
    s/##DISABLE_REDIRECT##/$disable_redirect/g;
    s/##DISABLE_SSL##/$disable_ssl/g;
    s/@@DOMAIN_NAME@@/$(escape_sed2 "$domain_name")/g;
    s/@@DOMAIN_PATH@@/$(escape_sed2 "$domain_relative_path")/g;
    s/@@DOMAIN_FULL_PATH@@/$(escape_sed2 "$domain_full_path")/g;
    s/@@SITE_NAME@@/$(escape_sed2 "$site_name")/g;
    s/@@SITE_FULL_NAME@@/$(escape_sed2 "$site_full_name")/g;
    s/@@SITE_PATH@@/$(escape_sed2 "$site_relative_path")/g;
    s/@@SITE_FULL_PATH@@/$(escape_sed2 "$site_full_path")/g;
    s/@@SITE_IP@@/$(escape_sed2 "$site_ip")/g;
    s/@@SITE_USER@@/$(escape_sed2 "$user")/g;
    s/@@SITE_GROUP@@/$(escape_sed2 "$group")/g;
  " "$@"
}

replace_names_to_dir () {
  relative="r"
  domain_relative_path="$domain_path"
  site_relative_path="${domain_path}${site_path}"
  disable_private=
  disable_assets=
  disable_redirect=
  disable_ssl=
  site_full_name="${site_name}.${domain_name}"
  site_ip="$(cat "${domain_full_path}ip")"
  site_ip="${site_ip:-"*"}"

  if [ "$assets" != OK ]
  then
    disable_assets="#"
  fi
  if [ "$private" != OK ]
  then
    disable_private="#"
  fi
  if [ "$https" != OK -a "$https" != FORCE ]
  then
    disable_ssl="#"
  fi
  if [ "$https" != FORCE ]
  then
    disable_redirect="#"
  fi

  verbose "  RELATIVE=$relative"
  verbose "  DISABLE_PRIVATE=$disable_private"
  verbose "  DISABLE_ASSETS=$disable_assets"
  verbose "  DISABLE_REDIRECT=$disable_redirect"
  verbose "  DISABLE_SSL=$disable_ssl"
  verbose "  DOMAIN_NAME=$domain_name"
  verbose "  DOMAIN_PATH=$domain_relative_path"
  verbose "  DOMAIN_FULL_PATH=$domain_full_path"
  verbose "  SITE_NAME=$site_name"
  verbose "  SITE_FULL_NAME=$site_full_name"
  verbose "  SITE_PATH=$site_relative_path"
  verbose "  SITE_FULL_PATH=$site_full_path"
  verbose "  SITE_IP=$site_ip"
  verbose "  SITE_USER=$user"
  verbose "  SITE_GROUP=$group"


  find -L "$@" -type f -print0 | while IFS= read -r -d '' file
  do
    replace_names "$file"
  done
}

domain_ls () {
  local dir
  dir="$1"
  if [ -z "$dir" ]
  then
    dir="$WWW_DIR"
  fi
  for i in `ls "$dir"`
  do
    is_domain "$i" && echo "$i"
  done
  [ -d "$dir" ]
}

site_ls () {
  local dir domain escape enabled
  domain="$1"
  domain_path=
  enabled="$2"
  if [ -z "$domain" ]
  then
    error "$domain is not a valid domain"
    return 1
  fi
  domainname2dir "$domain"
  if ! is_domain "$domain_full_path"
  then
    error "$domain_name exists, but is not a domain"
    return 1
  fi
  escape="$(escape_sed "$domain_full_path")"
  for i in "$domain_full_path"*
  do
    if is_site "$i"
    then
      if [ "$enabled" = ENABLED ] && is_site_enabled "$i"
      then
        echo "$i" | sed "s/^$escape//"
      elif [ "$enabled" = DISABLED ] && ! is_site_enabled "$i"
      then
        echo "$i" | sed "s/^$escape//"
      elif [ "$enabled" != ENABLED -a "$enabled" != DISABLED ]
      then
        echo "$i" | sed "s/^$escape//"
      fi
    fi
  done
  [ -d "$domain_full_path" ]
}

domainname2dir () {
  local dir domain
  dir="$1"
  if [ -z "$dir" ]
  then
    reset_domain
    return 1
  fi
  domain_path=
  if echo "$dir" | grep -v '^/' >/dev/null 2>&1
  then
    domain_path="$(trailing_slash "$dir")"
    dir="${WWW_DIR}${dir}"
  fi
  domain_full_path="$(trailing_slash "$dir")"
  domain_name="$(get_last_dir "$1")"
}
sitename2dir () {
  local dir domain escape
  if [ $# = 0 ]
  then
    reset_site
    return 1
  elif [ $# = 1 ]
  then
    if [ -z "$1" ]
    then
      reset_site
      return 1
    fi
    dir="$(trailing_slash "$1")"
    if echo "$dir" | grep '^/' >/dev/null 2>&1
    then
      site_path=
      site_full_path="$dir"
      site_name="$(get_last_dir "$1")"
      return
    fi
    for domain in `domain_ls`
    do
      escape="$(escape_sed ".$domain/")"
      if [ -n "$domain" ] && echo "$dir" | grep "${escape}$" >/dev/null 2>&1
      then
        dir="$(echo "$dir" | sed "s/${escape}$//")"
        sitename2dir "$domain" "$dir"
        return $!
      fi
      if [ -n "$domain" ] && is_site "$domain" "$dir"
      then
        sitename2dir "$domain" "$dir"
        return $!
      fi
    done
    return 1
  else
    if [ -z "$1" ]
    then
      shift
      sitename2dir "$@"
      return $!
    fi
    domainname2dir "$1"
    site_path="$(trailing_slash "$2")"
    site_full_path="${domain_full_path}${site_path}"
    site_name="$(get_last_dir "$2")"
  fi
}

is_site () {
  local domain_name domain_path site_name site_path site_full_path
  sitename2dir "$@"
  [ -d "$site_full_path" -a -e "${site_full_path}.site" -a -d "${site_full_path}conf" -a -d "${site_full_path}logs" ]
}

is_domain () {
  local domain_name domain_path site_name site_path site_full_path
  domainname2dir "$@"
  [ -d "$domain_full_path" -a -e "${domain_full_path}.domain" ]
}

is_site_enabled () {
  local domain_name domain_path site_name site_path site_full_path
  sitename2dir "$@"
  is_site "$site_full_path" && [ -n "$(ls "${site_full_path}conf/"*.conf 2>/dev/null)" ]
}
disable_site () {
  local domain_name domain_path site_name site_path site_full_path conf_file new_conf_file
  sitename2dir "$@"
  if ! is_site "$site_full_path"
  then
    error "$site_name is not a site"
    return 1
  fi
  if ! is_site_enabled "$site_full_path"
  then
    error "$site_name is already disabled"
    return 1
  fi
  verbose "Disabling $site_name"
  for conf_file in "${site_full_path}conf/"*.conf
  do
    new_conf_file="${conf_file}.disabled"
    fake mv "$conf_file" "$new_conf_file" 2>/dev/null
  done
}
enable_site () {
  local domain_name domain_path site_name site_path site_full_path conf_file new_conf_file
  sitename2dir "$@"
  if ! is_site "$site_full_path"
  then
    error "$site_name is not a site"
    return 1
  fi
  if is_site_enabled "$site_full_path"
  then
    error "$site_name is already enabled"
    return 1
  fi
  verbose "Enabling $site_name"
  for conf_file in "${site_full_path}conf/"*.conf.disabled
  do
    new_conf_file="$(echo "$conf_file" | sed 's/\.disabled$//')"
    fake mv "$conf_file" "$new_conf_file" 2>/dev/null
  done
}

find_or_create_user () {
  user="$1"
  group="$2"

  if [ -z "$user" ]
  then
    user="www-data"
  fi

  if ! id -u "$user" >/dev/null 2>&1
  then
    fake adduser --conf "$ADDUSER_CONF_FILE" --system --group --home "$site_full_path" "$user"
    if ! id -u "$user" >/dev/null 2>&1 && [ -z "$FAKE" ]
    then
      error "Cannot add the user $user"
      return 1
    fi
    fake adduser "$user" www-data
  fi

  if [ -z "$group" ]
  then
    group="$(id -gn "$user" 2>/dev/null)"
    if [ -n "$FAKE" -a -z "$group" ]
    then
      group="$user"
    fi
  fi

  if ! getent group "$group" >/dev/null 2>&1 && [ -z "$FAKE" ]
  then
    error "Group $group does not exist"
    return 1
  fi

  if [ -z "$1" ]
  then
    user="root"
  fi
}

new_site () {
  local domain_name domain_path site_name site_path site_full_path
  local user group assets private https dir
  domain_name=
  domain_path=
  site_name=
  site_path=
  site_full_path=

  user=
  group=
  assets=
  private=
  https=OK
  parse_new "$@"

  if [ -z "$site_full_path" ] || echo "$site_full_path" | grep -v '^/'
  then
    echo "invalid sitename" >&2
    exit 1
  fi
  if is_site "$site_full_path"
  then
    echo "$site_name already exists" >&2
    exit 1
  fi
  if [ -e "$site_full_path" ]
  then
    echo "$site_full_path already exists but is not a site" >&2
    exit 1
  fi
  if ! is_domain "$domain_full_path"
  then
    echo "$domain_name is not a valid domain" >&2
  fi
  verbose "Creating directory"
  if ! (cd "$domain_full_path" && fake mkdir -p "$site_full_path")
  then
    echo "cannot create $site_full_path" >&2
    exit 1
  fi
  verbose "Generating user"
  if ! find_or_create_user "$user" "$group"
  then
    error "A problem occured when retrieving user"
    error "Aborting..."
    fake rmdir "$site_full_path"
  fi

  verbose "Creating Skeleton"
  fake cp -R --no-preserve=all "${SKEL_DIR}site/." "$site_full_path"
  fake chown -R "$user:$group" "${site_full_path}assets" "${site_full_path}public" "${site_full_path}private"
  fake chown -R root:root "${site_full_path}conf" "${site_full_path}logs"
  fake chmod og-rwx "${site_full_path}conf" "${site_full_path}private" "${site_full_path}logs"
  if [ "$private" != OK ]
  then
    fake rm -rf "${site_full_path}private"
  fi
  if [ "$assets" != OK ]
  then
    fake rm -rf "${site_full_path}assets"
  fi
  fake chmod -w "$site_full_path"

  verbose "Instanciate Skeleton"

  if [ "$user" = "root" ]
  then
    user="www-data"
  fi
  if [ "$group" = "root" ]
  then
    group="www-data"
  fi

  replace_names_to_dir "$site_full_path"
  
  info "$site_name successfully created"
}

path_site () {
  site_name=
  site_path=
  site_full_path=
  
  nb_arg_parsed=
  parse_sitename "$@"
  if [ -z "$site_full_path" ]
  then
    error "Invalid sitename"
    exit 1
  fi
  shift $nb_arg_parsed

  if [ $# != 0 ]
  then
    error "Invalid extra arguments:" "$@"
    exit 1
  fi

  info "$site_full_path"
}

status_site () {
  site_name=
  site_path=
  site_full_path=
  
  nb_arg_parsed=
  parse_sitename "$@"
  if [ -z "$site_full_path" ]
  then
    error "Invalid sitename"
    exit 1
  fi
  shift $nb_arg_parsed

  if [ $# != 0 ]
  then
    error "Invalid extra arguments:" "$@"
    exit 1
  fi

  if is_site "$site_full_path"
  then
    if is_site_enabled "$site_full_path"
    then
      info "$site_name is enabled"
    else
      info "$site_name is disabled"
    fi
  else
    info "$site_name is not a site"
    return 1
  fi
}

parse_ls () {
  enabled=
  case "$1" in
    -a|--all)
      enabled=
      shift
      ;;
    -e|--enabled)
      enabled=ENABLED
      shift
      ;;
    -d|--disabled)
      enabled=DISABLED
      shift
      ;;
  esac
  site_ls "$1" "$enabled"
}
parse_new () {
  while [ $# != 0 ]
  do
    case "$1" in
      -u|--user)
        user="$2"
        shift 2
        ;;
      --user=*)
        user="$(echo "$1" | sed 's/^--user=//')"
        shift
        ;;
      -U|--no-user)
        user=
        shift
        ;;
      -g|--group)
        group="$2"
        shift 2
        ;;
      --group=*)
        group="$(echo "$1" | sed 's/^--group=//')"
        shift
        ;;
      -G|--no-group)
        group=
        shift
        ;;
      --no-https)
        https=
        shift
        ;;
      -S|--https)
        https=OK
        shift
        ;;
      -s|--force-https)
        https=FORCE
        shift
        ;;
      -p|--private)
        private=OK
        shift
        ;;
      -P|--no-private)
        private=
        shift
        ;;
      -a|--assets)
        assets=OK
        shift
        ;;
      -A|--no-assets)
        assets=
        shift
        ;;
      -*)
        error "Unknown option $1"
        exit 1
        ;;
      *)
        nb_arg_parsed=
        parse_sitename "$@"
        if [ -z "$site_full_path" ]
        then
          error "Invalid sitename"
          exit 1
        fi
        shift $nb_arg_parsed
        ;;
    esac
  done
}
remove_site () {
  local site force
  site=
  force=
  remove_user=
  while [ $# != 0 ]
  do
    case "$1" in
      -f|--force)
        shift
        force=OK
        ;;
      -a|--ask)
        shift
        force=
        ;;
      -u|--remove-user)
        shift
        remove_user=OK
        ;;
      -U|--keep-user)
        shift
        remove_user=
        ;;
      -*)
        error "Unknown option $1"
        exit 1
        ;;
      *)
        export nb_arg_parsed
        parse_sitename "$@"
        if [ -z "$site_full_path" ]
        then
          error "Invalid sitename"
          exit 1
        fi
        shift $nb_arg_parsed
        ;;
    esac
  done
  if ! is_site "$site_full_path" 
  then
    error "$site_name is not a site"
    exit 1
  fi
  if [ "$force" = OK ] || promptyn "Are you sure you want to remove this website? [y/N]" "N"
  then
    if [ "$remove_user" = OK ]
    then
      user="$(cat "${site_full_path}.owner" || ls -ld "${site_full_path}public" | awk 'NR==1 {print $3}')"
      if [ "$user" = "root" ]
      then
        user="www-data"
      fi
      if [ "$user" = "www-data" ]
      then
        error "Removing $user is forbidden"
        error "Please try again without removing the user"
        error "Aborting..."
        exit 1
      fi
      . "$ADDUSER_CONF_FILE"
      if [ "$(id -u "$user")" -lt "$FIRST_SYSTEM_UID" -o \
          "$(id -u "$user")" -gt "$LAST_SYSTEM_UID" ]
      then
        error "$user is not a website user"
        error "Please try again without removing the user"
        error "Aborting..."
        exit 1
      fi
      if [ "$(eval echo "~$user" | trailing_slash)" != "$site_full_path" ]
      then
        info "$user's home ($(eval echo "~$user")) is not equal to the site path ($site_full_path)"
        if ! promptyn "Do you want to continue? [y/n]"
        then
          error "Aborted by user"
          exit 1
        fi
      fi
      fake deluser "$user"
    fi
    fake rm -rf "$site_full_path"
  else
    exit 1
  fi
  info "$site_name successfully removed"
}

parse_domain_arg () {
  domain_name=
  domain_path=
  case "$1" in
    ls)
      shift
      domain_ls "$@"
      ;;
    new)
      shift
      domainname2dir "$1"
      domain_ip="$2"
      verbose "Creating Domain $domain_name"
      if ! fake mkdir -p "$domain_full_path"
      then
        error "Cannot create $domain_full_path directory"
        error "Aborting..."
        exit 1
      fi
      verbose "Creating Skeleton"
      if ! fake cp -R --no-preserve=all "${SKEL_DIR}domain/." "$domain_full_path"
      then
        error "Cannot create Domain skeleton"
        error "Aborting..."
        fake rmdir "$domain_full_path"
        exit 1
      fi
      replace_names_to_dir_domain "$domain_full_path"
      info "$domain_name successfully created"
      ;;
    remove)
      shift
      domainname2dir "$1"
      if ! is_domain "$domain_full_path"
      then
        error "$domain_name is not a domain."
        exit 1
      fi
      if [ -n "$(site_ls "$domain_full_path")" ]
      then
        info "$domain_full_path is not empty."
        if ! promptyn "Are you sure you want delete this domain? [y/N]" "N"
        then
          exit 1
        fi
      fi
      verbose "Removing Files"
      fake rm -rf "$domain_full_path" && info "$domain_name successfully removed"
      ;;
    path)
      shift
      domainname2dir "$1"
      if ! is_domain "$domain_full_path"
      then
        error "$domain_name is not a domain."
        exit 1
      fi
      info "$domain_full_path"
      ;;
    -f|--fake)
      shift
      QUIET=
      VERBOSE=OK
      FAKE=OK
      parse_domain_arg "$@"
      ;;
    -q|--quiet)
      shift
      QUIET=OK
      VERBOSE=
      FAKE=
      parse_domain_arg "$@"
      ;;
    -v|--verbose)
      shift
      QUIET=
      VERBOSE=OK
      parse_domain_arg "$@"
      ;;
    --version)
      info 0.1
      ;;
    -*)
      error "Unrecognized option $1"
      error "Aborting..."
      exit 1
      ;;
    *)
      error "Unrecognized command $1"
      error "Aborting..."
      exit 1
      ;;
  esac
}


test_cert=
#test_cert="--test-cert"

ssl_server_name=
ssl_domains=
certbot_clo=

ssl_get_domains () {
  ssl_server_name=
  ssl_domains=
  certbot_clo=
  if [ -z "$site_full_path" ]
  then
    return 1
  fi
  ssl_server_name="$(sed -n 's/^\s*ServerName\s\+\(.*\S\)\s*$/\1/p' "${site_full_path}conf/https.conf")"
  for d in $ssl_server_name $(sed -n 's/^\s*ServerAlias\s\+\(.*\S\)\s*$/\1/p' "${site_full_path}conf/https.conf")
  do
    if echo "$d" | grep -v "all\|local" | grep '\.' > /dev/null 2>&1
    then
      ssl_domains="$ssl_domains $d"
      certbot_clo="$certbot_clo -d $d"
    fi
  done
  ssl_domains="$(echo "$ssl_domains" | sed 's/\s*\(.*\)\s*$/\1/')"
  ssl_server_name="$(echo "$ssl_domains" | sed 's/\s.*$//')"
}

revoke_ssl () {
  site_name=
  site_path=
  site_full_path=
  
  nb_arg_parsed=

  parse_sitename "$@"
  if [ -z "$site_full_path" ]
  then
    return 1
  fi
  shift $nb_arg_parsed
  if [ $# != 0 ]
  then
    return 1
  fi

  ssl_get_domains
  email="hostmaster@$(echo "$ssl_server_name" | sed 's/^\(.*\.\)\?\([^.]\+\.[^.]\+\)$/\2/')"
  if ! promptyn "Are you sure you want to revoke the \"${site_name}\" certificate? [y/N]" N
  then
    error "Aborted..."
    exit 1
  fi
  fake certbot revoke -n $test_cert -m "$email" --cert-path "/etc/letsencrypt/live/${ssl_server_name}/cert.pem"
  return $!
  key="${site_full_path}ssl/private.key"
  csr="${site_full_path}ssl/signing-request.csr"
  crt="${site_full_path}ssl/public.crt"
  cnf="${site_full_path}ssl/openssl.cnf"

  if ! openssl verify -CAfile /etc/ssl/ca/cacert.pem "$crt" >/dev/null 2>&1
  then
    error "\"$crt\" is not a certificate"
    return 1
  elif openssl verify -CAfile /etc/ssl/ca/cacert.pem "$crt" | grep error >/dev/null 2>&1
  then
    error "\"$crt\" is not a valid certificate and cannot be expired"
    return 1
  fi

  if ! promptyn "Are you sure you want to revoke the \"${site_name}\" certificate? [y/N]" N
  then
    error "Aborted..."
    exit 1
  fi

  fake openssl ca -revoke "$crt"

  if promptyn "Do you want to delete the certificate \"$crt\"? [Y/n]" Y
  then
    fake rm "$crt"
  fi
}

generate_ssl () {
  site_name=
  site_path=
  site_full_path=
  
  nb_arg_parsed=

  parse_sitename "$@"
  if [ -z "$site_full_path" ]
  then
    return 1
  fi
  shift $nb_arg_parsed
  if [ $# != 0 ]
  then
    return 1
  fi

  ssl_get_domains
  email="hostmaster@$(echo "$ssl_server_name" | sed 's/^\(.*\.\)\?\([^.]\+\.[^.]\+\)$/\2/')"
  fake certbot certonly -n $test_cert -m "$email" $certbot_clo
  #certbot certonly -n $test_cert --webroot -w "$site_full_path" -m "$email" --cert-name "$site_full_name" $clo
  return $!

  key="${site_full_path}ssl/private.key"
  csr="${site_full_path}ssl/signing-request.csr"
  crt="${site_full_path}ssl/public.crt"
  cnf="${site_full_path}ssl/openssl.cnf"

  verbose "  -> " openssl verify -CAfile /etc/ssl/ca/cacert.pem "$crt"
  if openssl verify -CAfile /etc/ssl/ca/cacert.pem "$crt" >/dev/null 2>&1 && ! ( openssl verify -CAfile /etc/ssl/ca/cacert.pem "$crt" | grep error ) >/dev/null 2>&1
  then
    error "Certificate already generated and valid"
    error "Did you forget to revoque it?"
    return 1
  elif [ -f "$crt" ]
  then
    error "\"$crt\" already exists, but is not a valid certificate"
    return 1
  fi
  

  cat /etc/ssl/openssl.cnf > "$cnf"
  printf "[ SAN ]\nsubjectAltName=$(echo "$serveralias" | sed 's/\S\+/DNS:&,/g' | sed 's/,\?\s*$//' | sed 's/^\s*$/DNS: localhost/')" >> "$cnf"
  # cat /etc/ssl/openssl.cnf <(printf "[ SAN ]\nsubjectAltName=$(echo "$serveralias" | sed 's/\S\+/DNS:&,/g' | sed 's/,\?\s*$//' | sed 's/^\s*$/DNS: localhost/')") > "$cnf"
  verbose "$(tail -1 "$cnf")"
  if ! ( fake openssl genrsa -out "$key" 4096 && \
    fake openssl req -new -key "$key" -out "$csr" -subj "/C=FR/ST=France/L=/O=/OU=/CN=${servername}" -reqexts SAN -config "$cnf" && \
    fake openssl ca -policy policy_anything -out "$crt" -config "$cnf" -extensions v3_req -extensions SAN -infiles "$csr" && \
    fake chmod 600 "$key" "$csr" )
  then
    error "Unable to create and/or sign certificate"
    return 1
  fi
}
clear_ssl () {
  site_name=
  site_path=
  site_full_path=
  
  nb_arg_parsed=

  parse_sitename "$@"
  if [ -z "$site_full_path" ]
  then
    return 1
  fi
  shift $nb_arg_parsed
  if [ $# != 0 ]
  then
    return 1
  fi

  ssl_get_domains
  if ! promptyn "Are you sure you want to delete the \"${site_name}\" certificate? [y/N]" N
  then
    error "Aborted..."
    exit 1
  fi
  reason="--reason cessationofoperation"
  #fake certbot revoke -n -m "$email" $reason --cert-path "/etc/letsencrypt/live/${ssl_server_name}/cert.pem"
  rm -rf "/etc/letsencrypt/live/${ssl_server_name:-dummy}"
  rm -rf "/etc/letsencrypt/renewal/${ssl_server_name:-dummy}.conf"
  rm -rf "/etc/letsencrypt/archive/${ssl_server_name:-dummy}"
  info "Certificate deleted"
  return 0

  key="${site_full_path}ssl/private.key"
  csr="${site_full_path}ssl/signing-request.csr"
  crt="${site_full_path}ssl/public.crt"
  cnf="${site_full_path}ssl/openssl.cnf"

  if ! promptyn "Are you sure you want to clear the ssl folder \"${site_full_path}ssl/\"? [y/N]" N
  then
    error "Aborted..."
    exit 1
  fi

  verbose "  -> " openssl verify -CAfile /etc/ssl/ca/cacert.pem "$crt"
  if openssl verify -CAfile /etc/ssl/ca/cacert.pem "$crt" >/dev/null 2>&1 && ! ( openssl verify -CAfile /etc/ssl/ca/cacert.pem "$crt" | grep error ) >/dev/null 2>&1
  then
    fake openssl ca -revoke "$crt" 2>/dev/null
  fi
  fake rm "${site_full_path}ssl/"*
}
info_ssl () {
  site_name=
  site_path=
  site_full_path=
  
  nb_arg_parsed=

  parse_sitename "$@"
  if [ -z "$site_full_path" ]
  then
    return 1
  fi
  shift $nb_arg_parsed
  if [ $# != 0 ]
  then
    return 1
  fi

  servername="$(sed -n 's/^\s*ServerName\s\+\(.*\S\)\s*$/\1/p' "${site_full_path}conf/https.conf")"
  serveralias="$(sed -n 's/^\s*ServerAlias\s\+\(.*\S\)\s*$/\1/p' "${site_full_path}conf/https.conf")"

  key="${site_full_path}ssl/private.key"
  csr="${site_full_path}ssl/signing-request.csr"
  crt="${site_full_path}ssl/public.crt"
  cnf="${site_full_path}ssl/openssl.cnf"

  execute openssl verify -CAfile /etc/ssl/ca/cacert.pem "$crt"
  execute openssl x509 -in "$crt" -noout -text
}
ssl () {
  case "$1" in
    generate)
      shift
      generate_ssl "$@"
      ;;
    revoke)
      shift
      revoke_ssl "$@"
      ;;
    clear)
      shift
      clear_ssl "$@"
      ;;
    info)
      shift
      info_ssl "$@"
      ;;
    *)
      error "Unrecognized command $1"
      error "Aborting..."
      exit 1
      ;;
  esac
}

parse_arg () {
  case "$1" in
    domain)
      shift
      parse_domain_arg "$@"
      ;;
    ls)
      shift
      parse_ls "$@"
      ;;
    enable)
      shift
      enable_site "$@"
      ;;
    disable)
      shift
      disable_site "$@"
      ;;
    new)
      shift
      new_site "$@"
      ;;
    remove)
      shift
      remove_site "$@"
      ;;
    ssl)
      shift
      ssl "$@"
      ;;
    path)
      shift
      path_site "$@"
      ;;
    status)
      shift
      status_site "$@"
      ;;
    help)
      ;;
    -f|--fake)
      shift
      QUIET=
      VERBOSE=OK
      FAKE=OK
      parse_arg "$@"
      ;;
    -q|--quiet)
      shift
      QUIET=OK
      VERBOSE=
      FAKE=
      parse_arg "$@"
      ;;
    -v|--verbose)
      shift
      QUIET=
      VERBOSE=OK
      parse_arg "$@"
      ;;
    --version)
      info 0.1
      ;;
    -*)
      error "Unrecognized option $1"
      error "Aborting..."
      exit 1
      ;;
    *)
      error "Unrecognized command $1"
      error "Aborting..."
      exit 1
      ;;
  esac
  
}

WWW_DIR="$(trailing_slash "$WWW_DIR")"
SKEL_DIR="$(trailing_slash "$SKEL_DIR")"
SCRIPT_DIR="$(trailing_slash "$SCRIPT_DIR")"

parse_arg "$@"

